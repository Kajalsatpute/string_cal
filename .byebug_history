c
numbers
@arr
num
c
num
c
num
c
numbers.gsub('"','').gsub('"','').scan(/\d+(?:,\d+)*/)
@n.to_s.gsub('\\"','').gsub('"','').to_a
@n.to_s.gsub('\\"','').gsub('"','')
@n.to_s.gsub('\\"','')
@n.to_s.gsub('\\\"','')
@n.to_s.gsub('\\"','')
@n.to_s.gsub('"','')
@n.to_s
@n
numbers.gsub('"','').gsub('"','').scan(/\d+(?:,\d+)*/)[0]
numbers.gsub('"','').gsub('"','').scan(/\d+(?:,\d+)*/)
numbers.gsub('"','').gsub('"','')
numbers.gsub('"','')
numbers.gsub('"','').split()[0]
numbers.gsub('"','').split()
numbers.gsub('"','')
numbers.gsub('\"','')
numbers.gsub('\"',' ')
numbers.class
numbers.gsub('\"',' ')
numbers.gsub('\"','')
numbers
@n.gsub('\"','')
@n
c
rake = RakeText.new
require 'text_rank'
c
require 'text_rank'
numbers.gsub("\""," ").gsub(" ","").gsub('"','')
numbers.gsub("\""," ").gsub(" ","")
numbers.gsub("\""," ").gsub(" ","").split(' ')
numbers.gsub("\""," ").gsub(" ","").split(' ').split(',')
numbers.gsub("\""," ").gsub(" ","").split(' ')
numbers.gsub("\""," ").gsub(" ","").split(',')
numbers.gsub("\""," ").gsub(" ","").split(' ')[0]
numbers.gsub("\""," ").gsub(" ","").split(' ')
numbers.gsub("\""," ").gsub(" ","").split('')
numbers.gsub("\""," ").gsub(" ","")
numbers.gsub("\""," ").gsub(" ","").split(',')
numbers.gsub("\""," ").gsub(" ","")
numbers.gsub("\""," ")
numbers.gsub("\"," ")
numbers.gsub("\","")
numbers.gsub("\",")
numbers.class.gsub("\",")
numbers.class
numbers
@n.class
numbers
@n
c
2,3,4,5
2,3,4,
c
numbers
@n
c
@n
c
@n
c
numbers
numbers.split('')
numbers.split(',')
numbers
numbers[0]
numbers
@n
@num
c
numbers
c
n
numbers
c
numbers.sum
numbers
n
negative_numbers.any?
negative_numbers = numbers.select { |n| n.negative? }
numbers.select { |n| n.negative? }
n
numbers
n
numbers.split(/#{delimiter}/).map(&:to_i)
delimiter
numbers
n
delimiter_match ? Regexp.escape(delimiter_match[1]) : ',|\n'
delimiter_match
n
numbers.match(/^\/\/(.+)\n/)
numbers
c
n
 numbers.empty?
numbers
self
n
c
StringCalculator.add('')
expect(StringCalculator.add('')).to eq(0)
